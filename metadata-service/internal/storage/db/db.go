// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createVendorDataStmt, err = db.PrepareContext(ctx, createVendorData); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVendorData: %w", err)
	}
	if q.deleteVendorDataStmt, err = db.PrepareContext(ctx, deleteVendorData); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteVendorData: %w", err)
	}
	if q.getVendorDataStmt, err = db.PrepareContext(ctx, getVendorData); err != nil {
		return nil, fmt.Errorf("error preparing query GetVendorData: %w", err)
	}
	if q.updateVendorDataStmt, err = db.PrepareContext(ctx, updateVendorData); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVendorData: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createVendorDataStmt != nil {
		if cerr := q.createVendorDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVendorDataStmt: %w", cerr)
		}
	}
	if q.deleteVendorDataStmt != nil {
		if cerr := q.deleteVendorDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteVendorDataStmt: %w", cerr)
		}
	}
	if q.getVendorDataStmt != nil {
		if cerr := q.getVendorDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVendorDataStmt: %w", cerr)
		}
	}
	if q.updateVendorDataStmt != nil {
		if cerr := q.updateVendorDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVendorDataStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createVendorDataStmt *sql.Stmt
	deleteVendorDataStmt *sql.Stmt
	getVendorDataStmt    *sql.Stmt
	updateVendorDataStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createVendorDataStmt: q.createVendorDataStmt,
		deleteVendorDataStmt: q.deleteVendorDataStmt,
		getVendorDataStmt:    q.getVendorDataStmt,
		updateVendorDataStmt: q.updateVendorDataStmt,
	}
}
