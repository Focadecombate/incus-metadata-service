// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createVendorData = `-- name: CreateVendorData :one
INSERT INTO
  vendor_data (name, description, data)
VALUES
  (?, ?, ?) RETURNING id, name, description, created_at, updated_at, deleted_at, data
`

type CreateVendorDataParams struct {
	Name        string
	Description *string
	Data        interface{}
}

func (q *Queries) CreateVendorData(ctx context.Context, arg CreateVendorDataParams) (VendorDatum, error) {
	row := q.queryRow(ctx, q.createVendorDataStmt, createVendorData, arg.Name, arg.Description, arg.Data)
	var i VendorDatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Data,
	)
	return i, err
}

const deleteVendorData = `-- name: DeleteVendorData :exec
UPDATE
  vendor_data
SET
  deleted_at = CURRENT_TIMESTAMP
WHERE
  id = ?
`

func (q *Queries) DeleteVendorData(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteVendorDataStmt, deleteVendorData, id)
	return err
}

const getVendorData = `-- name: GetVendorData :one
SELECT
  id,
  name,
  description,
  created_at,
  updated_at,
  data
FROM
  vendor_data
WHERE
  name = ?
  and deleted_at IS NULL
`

type GetVendorDataRow struct {
	ID          int64
	Name        string
	Description *string
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Data        interface{}
}

func (q *Queries) GetVendorData(ctx context.Context, name string) (GetVendorDataRow, error) {
	row := q.queryRow(ctx, q.getVendorDataStmt, getVendorData, name)
	var i GetVendorDataRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const updateVendorData = `-- name: UpdateVendorData :one
UPDATE
  vendor_data
SET
  description = ?,
  data = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, name, description, created_at, updated_at, deleted_at, data
`

type UpdateVendorDataParams struct {
	Description *string
	Data        interface{}
	ID          int64
}

func (q *Queries) UpdateVendorData(ctx context.Context, arg UpdateVendorDataParams) (VendorDatum, error) {
	row := q.queryRow(ctx, q.updateVendorDataStmt, updateVendorData, arg.Description, arg.Data, arg.ID)
	var i VendorDatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Data,
	)
	return i, err
}
